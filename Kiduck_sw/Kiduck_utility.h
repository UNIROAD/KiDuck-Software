#include <SPI.h>
#include <Wire.h>
#include <ArduinoSTL.h>
#include <SoftwareSerial.h>   //Software Serial Port

#ifndef GLST
using namespace std;

//############# Game Datas #############//
bool setting_flag = false;
String user_name;
int user_age;
int user_weight;

int character;
int growth = 0;

//############# Pin Input Related #############//
bool previn[] = {false, false, false, false};
bool currin[] = {false, false, false, false};

void setButtonPinMode(){
  // pin 9, 8, 7, 6
  for(int i=6;i<10;i++) pinMode(i, INPUT_PULLUP);
}

bool fall_edge(int num){
  previn[num] = currin[num];
  currin[num] = (bool)digitalRead(num+6);
  return previn[num] && !currin[num];
}

int button_check(){
  for(int i=3;i>=0;i--){
    if(fall_edge(i)) return i;
  }
  return -1;
}


//############# Clock #############//
class elapsed_time{
protected:
  bool t_flag;
  unsigned long start_t, crit_t;
public:
  elapsed_time(int crit_t)
  :t_flag(false), crit_t(crit_t){}

  bool elapsed_time_check(){
    if(!this->t_flag){
        this->t_flag = true;
        this->start_t = millis();
    }else if(millis()-this->start_t>=this->crit_t){
        this->t_flag = false;
        return true;
    }
    return false;
  }
};

//############# Disp on/off control #############//
#define DISP_PIN 21

bool disp_on = true;
bool prev_disp_on = true;

void setDisplaySwitchPinMode(){pinMode(DISP_PIN, INPUT_PULLUP);}

void read_disp_on(){
  prev_disp_on = disp_on;
  disp_on = (bool)digitalRead(DISP_PIN);
}

bool disp_edge(bool fall){
  read_disp_on();
  if(fall) return prev_disp_on && !disp_on;
  else return disp_on && !prev_disp_on;
}

//############# BLE #############//

#define RxD 4
#define TxD 5

SoftwareSerial blueToothSerial(RxD, TxD); //the software serial port

char recv_str[100];
char nextChar = "";

char readChar();
int recvMsg(unsigned int timeout);
int recvcmp(const char *str);
int strcmp(char *a, const char *b);
String strJoin(String str1, String str2, String str3);
String strJoin(int str1, int str2, int str3);
String fixLen(String sendVal);

//receive message from Bluetooth with time out
int recvMsg(unsigned int timeout=1000){
  //wait for feedback
  unsigned char num;
  unsigned char len = 100;
  int i = 0;

  //waiting for the first character with time out
  for(unsigned int time = 0;!blueToothSerial.available();time++){
    delay(50);
    if (time > (timeout / 50)) return -1;
  }

  //read other characters from uart buffer to string
  for(;blueToothSerial.available() && (i < 100);i++)
    recv_str[i] = char(blueToothSerial.read());

  recv_str[i] = '\0';

  return 0;
}

int recvcmp(const char *str) {return strcmp((char *)recv_str, str);}

int strcmp(char *a, const char *b){
  for(unsigned int ptr = 0; a[ptr] != '\0'; ptr++){
    if (a[ptr] != b[ptr]) return -1;
  }
  return 0;
}

String strJoin(String str1, String str2, String str3){
  return str1 + " " + str2 + " " + str3;
}
String strJoin(int str1, int str2, int str3){
  return String(str1) + " " + String(str2) + " " + String(str3);
}

String fixLen(String sendVal){
  if (sendVal.length() > 20)
    return "";

  while (sendVal.length() < 20) {
    sendVal += ' ';
  }
  return sendVal;
}

//send command to Bluetooth and return if there is a response received
int sendBlueToothCommand(char command[], int timeout = 200){
  Serial.print("send: "); Serial.println(command);

  blueToothSerial.print(command);
  delay(300);

  if (recvMsg(timeout) != 0) return -1;

  Serial.print("recv: "); Serial.println(recv_str);
  return 0;
}

// Compare Message to Characters which are collected by readChar()
bool cmpMsg(String msg, bool refresh=true){
    if(refresh) nextChar = readChar();

    if(nextChar != msg[0]) return false;
    for(int i=1;i<msg.length();i++){
        if(readChar() != msg[i]) return false;
    }
    return true;
}

// Read only one Character from BLE connection
char readChar(){  
  while(!blueToothSerial.available());
  return char(blueToothSerial.read());
}


//############# Duck Image #############//
#define DUCK_HEIGHT   0x32
#define DUCK_WIDTH    0x32
static const unsigned char PROGMEM duck_0_bmp[]=
{0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x7f,0xfc,0x00,0x00,0x00
,0x00,0x00,0x7f,0xfc,0x00,0x00,0x00
,0x00,0x07,0xff,0xff,0x80,0x00,0x00
,0x00,0x07,0xff,0xff,0x80,0x00,0x00
,0x00,0x3f,0xff,0xff,0xf8,0x00,0x00
,0x00,0x3f,0xff,0xff,0xf8,0x00,0x00
,0x00,0x3f,0xff,0xff,0xf8,0x00,0x00
,0x00,0x3f,0xff,0xff,0xf8,0x00,0x00
,0x00,0x3f,0xff,0xff,0xff,0x00,0x00
,0x01,0xff,0xff,0xff,0xff,0x00,0x00
,0x01,0xff,0xff,0xff,0xff,0x00,0x00
,0x01,0xff,0xff,0xff,0xff,0x00,0x00
,0x01,0xff,0xff,0xff,0xff,0x00,0x00
,0x1f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x1f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x1f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x1f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x1f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x1f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x1f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x1f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x1f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x1f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x03,0xff,0xff,0xff,0xff,0xe0,0x00
,0x01,0xff,0xff,0xff,0xff,0x00,0x00
,0x01,0xff,0xff,0xff,0xff,0x00,0x00
,0x01,0xff,0xff,0xff,0xff,0x00,0x00
,0x01,0xff,0xff,0xff,0xff,0x00,0x00
,0x00,0x3f,0xff,0xff,0xf8,0x00,0x00
,0x00,0x3f,0xff,0xff,0xf8,0x00,0x00
,0x00,0x07,0xff,0xff,0x80,0x00,0x00
,0x00,0x07,0xff,0xff,0x80,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

static const unsigned char PROGMEM duck_1_bmp[] =
{0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x1f,0xfc,0x00,0x00,0x00
,0x00,0x00,0x1f,0xfc,0x00,0x00,0x00
,0x00,0x01,0xe0,0x07,0x80,0x00,0x00
,0x00,0x03,0x00,0x00,0x60,0x00,0x00
,0x00,0x06,0x00,0x00,0x60,0x00,0x00
,0x00,0x0c,0x00,0x00,0x18,0x00,0x00
,0x00,0x0c,0x00,0x00,0x18,0x00,0x00
,0x00,0x0c,0x00,0x00,0x18,0x00,0x00
,0x00,0x30,0x00,0x00,0x06,0x00,0x00
,0x00,0x30,0x18,0x0c,0x06,0x00,0x00
,0x00,0x30,0x18,0x0c,0x0c,0x00,0x00
,0x00,0x0c,0x64,0x36,0x18,0x00,0x00
,0x00,0x0f,0x83,0xc1,0xf8,0x00,0x00
,0x00,0x0f,0x81,0xc1,0xf8,0x00,0x00
,0x00,0x0c,0x60,0x0c,0x18,0x00,0x00
,0x00,0x0c,0x70,0x0e,0x18,0x00,0x00
,0x00,0x0c,0x78,0x0e,0x18,0x00,0x00
,0x00,0x0c,0x00,0x00,0x18,0x00,0x00
,0x00,0x06,0x07,0xf0,0x60,0x00,0x00
,0x00,0x06,0x07,0xf0,0x60,0x00,0x00
,0x00,0x01,0x9f,0xfd,0x80,0x00,0x00
,0x00,0x63,0x9f,0xf0,0xe7,0x00,0x00
,0x00,0xf6,0x07,0xf0,0x67,0x00,0x00
,0x00,0xdc,0x03,0xc0,0x1b,0x00,0x00
,0x00,0xdc,0x01,0xc0,0x1b,0x00,0x00
,0x00,0xdc,0x00,0x00,0x1b,0x00,0x00
,0x00,0xc7,0x87,0xf1,0xe3,0x00,0x00
,0x00,0xc3,0xff,0xff,0xe3,0x00,0x00
,0x00,0xc0,0x78,0x0e,0x03,0x00,0x00
,0x00,0x30,0x00,0x00,0x06,0x00,0x00
,0x00,0x30,0x00,0x00,0x06,0x00,0x00
,0x00,0x30,0x00,0x00,0x06,0x00,0x00
,0x00,0x0c,0x00,0x00,0x18,0x00,0x00
,0x00,0x0f,0x80,0x00,0x10,0x00,0x00
,0x00,0x07,0x80,0x01,0xe0,0x00,0x00
,0x00,0x00,0x7f,0xfe,0x00,0x00,0x00
,0x00,0x00,0x7f,0xfe,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

static const unsigned char PROGMEM duck_2_bmp[] =
{0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x07,0xe0,0x00,0x00,0x00
,0x00,0x00,0x38,0x1c,0x00,0x00,0x00
,0x00,0x00,0xc0,0x03,0x00,0x00,0x00
,0x00,0x01,0x00,0x00,0x80,0x00,0x00
,0x00,0x02,0x00,0x00,0x40,0x00,0x00
,0x18,0x04,0x00,0x00,0x20,0x00,0x00
,0x1f,0x88,0x00,0x00,0x20,0x00,0x00
,0x1c,0x78,0x00,0x00,0x10,0x00,0x00
,0x18,0x06,0x00,0x00,0x18,0x00,0x00
,0x1c,0x01,0x01,0xc0,0x18,0x00,0x00
,0x0e,0x01,0xc2,0xa0,0x18,0x00,0x00
,0x09,0x00,0x20,0x00,0x08,0x00,0x00
,0x04,0xc0,0x10,0x00,0x0c,0x00,0x00
,0x04,0x60,0x08,0x00,0x08,0x00,0x00
,0x02,0x18,0x0c,0x00,0x0c,0x00,0x00
,0x00,0x0e,0x06,0x00,0x0c,0x00,0x00
,0x00,0x83,0xc2,0x00,0x18,0x00,0x00
,0x00,0x80,0xc2,0x00,0x18,0x00,0x00
,0x01,0x00,0x74,0x00,0x18,0x00,0x00
,0x03,0x03,0xc4,0x00,0x10,0x00,0x00
,0x01,0xf8,0x08,0x00,0x20,0x00,0x00
,0x00,0x80,0x30,0x00,0x20,0x00,0x00
,0x00,0x60,0xc0,0x00,0x20,0x00,0x00
,0x00,0x1f,0x00,0x40,0x20,0x00,0x00
,0x00,0x04,0x00,0x40,0x20,0x00,0x00
,0x00,0x08,0x00,0x40,0x18,0x00,0x00
,0x00,0x08,0x00,0x40,0x18,0x70,0x00
,0x00,0x08,0x00,0x40,0x19,0x90,0x00
,0x00,0x10,0x00,0x20,0x0e,0x30,0x00
,0x00,0x10,0x00,0x20,0x0c,0x30,0x00
,0x00,0x10,0x00,0x10,0x0c,0x60,0x00
,0x00,0x10,0x00,0x08,0x06,0x60,0x00
,0x00,0x10,0x00,0x06,0x03,0xc0,0x00
,0x00,0x10,0x00,0x01,0xff,0x80,0x00
,0x00,0x08,0x00,0x00,0x03,0x00,0x00
,0x00,0x08,0x00,0x00,0x06,0x00,0x00
,0x00,0x04,0x00,0x00,0x1c,0x00,0x00
,0x00,0x02,0x00,0x00,0x70,0x00,0x00
,0x00,0x01,0x80,0x03,0x80,0x00,0x00
,0x00,0x00,0x78,0x1c,0x00,0x00,0x00
,0x00,0x00,0x0f,0xfc,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

static const unsigned char* duck_img(){
  switch(growth){
    case 0: return duck_0_bmp;
    case 1: return duck_1_bmp;
    case 2: return duck_2_bmp;
    default: break;
  }
  return duck_2_bmp;
}

#define GLST
#endif
